#!/usr/bin/python3


"""
gitc is a command line wrapper on `git clone` command that
maintains a cache to speed cloning up.
"""


import argparse
import os
import subprocess


# cache directory according to XDG
XDG_CACHE_HOME = os.environ.get("XDG_CACHE_HOME", os.path.expanduser("~/.cache"))
CACHE_DIR = os.path.join(XDG_CACHE_HOME, "git-cache")


def get_parser():
    parser = argparse.ArgumentParser(
        usage="%(prog)s [git options] [--] <repository> [directory]",
        description="Clone a git repo while using a user specific git cache",
    )
    parser.add_argument(
        "repository",
        help="The (possibly remote) repository to clone from. See the GIT URLS section below for more information on specifying repositories.",
    )
    return parser


def get_cache_dir(repository):
    repository = repository.strip("/")
    repository = repository.replace("/", "_")
    return os.path.join(CACHE_DIR, repository)


def main():
    parser = get_parser()
    args, _ = parser.parse_known_args()
    repository = args.repository

    # parser has no args -> all are unknown and will be passed to git
    parser = argparse.ArgumentParser()
    _, git_args = parser.parse_known_args()

    try:
        os.makedirs(CACHE_DIR)
    except:
        pass

    cache_dir = get_cache_dir(repository)
    if os.path.exists(cache_dir):
        cmd = ["git", "fetch", "--all"]
        subprocess.call(cmd, cwd=cache_dir)
    else:
        cmd = ["git", "clone", "--mirror"]
        cmd += [repository]
        cmd += [cache_dir]
        subprocess.call(cmd)

    cmd = ["git", "clone"]
    cmd += ["--reference-if-able=%s" % cache_dir]
    cmd += git_args
    subprocess.call(cmd)


if __name__ == "__main__":
    main()
